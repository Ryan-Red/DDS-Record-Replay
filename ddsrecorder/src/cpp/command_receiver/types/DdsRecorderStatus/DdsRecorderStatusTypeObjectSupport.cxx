// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DdsRecorderStatusTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "DdsRecorderStatusTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "DdsRecorderStatus.hpp"


using namespace eprosima::fastdds::dds::xtypes;

void register_DdsRecorderStatus_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                register_DdsRecorderStatus_type_identifier();

            });
}

void register_DdsRecorderStatus_type_identifier()
{
    {
        StructTypeFlag struct_flags_DdsRecorderStatus = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_DdsRecorderStatus;
        TypeIdentifierPair type_ids_DdsRecorderStatus;
        QualifiedTypeName type_name_DdsRecorderStatus = "DdsRecorderStatus";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_DdsRecorderStatus;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_DdsRecorderStatus;
        CompleteTypeDetail detail_DdsRecorderStatus = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_DdsRecorderStatus, ann_custom_DdsRecorderStatus, type_name_DdsRecorderStatus.to_string());
        CompleteStructHeader header_DdsRecorderStatus;
        header_DdsRecorderStatus = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_DdsRecorderStatus);
        CompleteStructMemberSeq member_seq_DdsRecorderStatus;
        {
            return_code_DdsRecorderStatus =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DdsRecorderStatus);

            if (return_code_DdsRecorderStatus != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_DdsRecorderStatus =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_DdsRecorderStatus);
                if (return_code_DdsRecorderStatus != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_previous = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_previous;
            MemberId member_id_previous = 0x00000000;
            if (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1()._d() || TK_NONE == type_ids_DdsRecorderStatus.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_previous = TypeObjectUtils::build_common_struct_member(member_id_previous, member_flags_previous, type_ids_DdsRecorderStatus.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_previous = TypeObjectUtils::build_common_struct_member(member_id_previous, member_flags_previous, type_ids_DdsRecorderStatus.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure previous member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_previous = "previous";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_previous;
            ann_custom_DdsRecorderStatus.reset();
            CompleteMemberDetail detail_previous = TypeObjectUtils::build_complete_member_detail(name_previous, member_ann_builtin_previous, ann_custom_DdsRecorderStatus);
            CompleteStructMember member_previous = TypeObjectUtils::build_complete_struct_member(common_previous, detail_previous);
            TypeObjectUtils::add_complete_struct_member(member_seq_DdsRecorderStatus, member_previous);
        }
        {
            return_code_DdsRecorderStatus =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DdsRecorderStatus);

            if (return_code_DdsRecorderStatus != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_DdsRecorderStatus =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_DdsRecorderStatus);
                if (return_code_DdsRecorderStatus != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_current = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_current;
            MemberId member_id_current = 0x00000001;
            if (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1()._d() || TK_NONE == type_ids_DdsRecorderStatus.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_current = TypeObjectUtils::build_common_struct_member(member_id_current, member_flags_current, type_ids_DdsRecorderStatus.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_current = TypeObjectUtils::build_common_struct_member(member_id_current, member_flags_current, type_ids_DdsRecorderStatus.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure current member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_current = "current";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_current;
            ann_custom_DdsRecorderStatus.reset();
            CompleteMemberDetail detail_current = TypeObjectUtils::build_complete_member_detail(name_current, member_ann_builtin_current, ann_custom_DdsRecorderStatus);
            CompleteStructMember member_current = TypeObjectUtils::build_complete_struct_member(common_current, detail_current);
            TypeObjectUtils::add_complete_struct_member(member_seq_DdsRecorderStatus, member_current);
        }
        {
            return_code_DdsRecorderStatus =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DdsRecorderStatus);

            if (return_code_DdsRecorderStatus != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_DdsRecorderStatus =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_DdsRecorderStatus);
                if (return_code_DdsRecorderStatus != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_info = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_info;
            MemberId member_id_info = 0x00000002;
            if (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1()._d() || TK_NONE == type_ids_DdsRecorderStatus.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DdsRecorderStatus.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_info = TypeObjectUtils::build_common_struct_member(member_id_info, member_flags_info, type_ids_DdsRecorderStatus.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DdsRecorderStatus.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderStatus.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_info = TypeObjectUtils::build_common_struct_member(member_id_info, member_flags_info, type_ids_DdsRecorderStatus.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure info member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_info = "info";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_info;
            ann_custom_DdsRecorderStatus.reset();
            CompleteMemberDetail detail_info = TypeObjectUtils::build_complete_member_detail(name_info, member_ann_builtin_info, ann_custom_DdsRecorderStatus);
            CompleteStructMember member_info = TypeObjectUtils::build_complete_struct_member(common_info, detail_info);
            TypeObjectUtils::add_complete_struct_member(member_seq_DdsRecorderStatus, member_info);
        }
        CompleteStructType struct_type_DdsRecorderStatus = TypeObjectUtils::build_complete_struct_type(struct_flags_DdsRecorderStatus, header_DdsRecorderStatus, member_seq_DdsRecorderStatus);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_DdsRecorderStatus, type_name_DdsRecorderStatus.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "DdsRecorderStatus already registered in TypeObjectRegistry for a different type.");
        }
        return_code_DdsRecorderStatus =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "DdsRecorderStatus", type_ids_DdsRecorderStatus);
        if (return_code_DdsRecorderStatus != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "DdsRecorderStatus: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

