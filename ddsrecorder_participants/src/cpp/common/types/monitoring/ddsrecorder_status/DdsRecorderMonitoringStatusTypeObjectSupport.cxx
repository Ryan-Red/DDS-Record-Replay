// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DdsRecorderMonitoringStatusTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include <ddsrecorder_participants/common/types/monitoring/ddsrecorder_status/DdsRecorderMonitoringStatusTypeObjectSupport.hpp>

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include <ddsrecorder_participants/common/types/monitoring/ddsrecorder_status/DdsRecorderMonitoringStatus.hpp>

#include "ddspipe_core/types/monitoring/status/MonitoringStatus.hpp"

using namespace eprosima::fastdds::dds::xtypes;

void register_DdsRecorderMonitoringStatus_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                register_MonitoringErrorStatus_type_identifier();

                register_MonitoringStatus_type_identifier();

                register_DdsRecorderMonitoringErrorStatus_type_identifier();

                register_DdsRecorderMonitoringStatus_type_identifier();

            });
}

void register_DdsRecorderMonitoringErrorStatus_type_identifier()
{
    {
        StructTypeFlag struct_flags_DdsRecorderMonitoringErrorStatus = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_DdsRecorderMonitoringErrorStatus;
        TypeIdentifierPair type_ids_DdsRecorderMonitoringErrorStatus;
        QualifiedTypeName type_name_DdsRecorderMonitoringErrorStatus = "DdsRecorderMonitoringErrorStatus";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_DdsRecorderMonitoringErrorStatus;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_DdsRecorderMonitoringErrorStatus;
        CompleteTypeDetail detail_DdsRecorderMonitoringErrorStatus = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_DdsRecorderMonitoringErrorStatus, ann_custom_DdsRecorderMonitoringErrorStatus, type_name_DdsRecorderMonitoringErrorStatus.to_string());
        CompleteStructHeader header_DdsRecorderMonitoringErrorStatus;
        header_DdsRecorderMonitoringErrorStatus = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_DdsRecorderMonitoringErrorStatus);
        CompleteStructMemberSeq member_seq_DdsRecorderMonitoringErrorStatus;
        {
            return_code_DdsRecorderMonitoringErrorStatus =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_DdsRecorderMonitoringErrorStatus);

            if (return_code_DdsRecorderMonitoringErrorStatus != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "mcap_file_creation_failure Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_mcap_file_creation_failure = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_mcap_file_creation_failure;
            MemberId member_id_mcap_file_creation_failure = 0x00000000;
            if (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() || TK_NONE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_mcap_file_creation_failure = TypeObjectUtils::build_common_struct_member(member_id_mcap_file_creation_failure, member_flags_mcap_file_creation_failure, type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_mcap_file_creation_failure = TypeObjectUtils::build_common_struct_member(member_id_mcap_file_creation_failure, member_flags_mcap_file_creation_failure, type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure mcap_file_creation_failure member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_mcap_file_creation_failure = "mcap_file_creation_failure";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_mcap_file_creation_failure;
            ann_custom_DdsRecorderMonitoringErrorStatus.reset();
            CompleteMemberDetail detail_mcap_file_creation_failure = TypeObjectUtils::build_complete_member_detail(name_mcap_file_creation_failure, member_ann_builtin_mcap_file_creation_failure, ann_custom_DdsRecorderMonitoringErrorStatus);
            CompleteStructMember member_mcap_file_creation_failure = TypeObjectUtils::build_complete_struct_member(common_mcap_file_creation_failure, detail_mcap_file_creation_failure);
            TypeObjectUtils::add_complete_struct_member(member_seq_DdsRecorderMonitoringErrorStatus, member_mcap_file_creation_failure);
        }
        {
            return_code_DdsRecorderMonitoringErrorStatus =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_DdsRecorderMonitoringErrorStatus);

            if (return_code_DdsRecorderMonitoringErrorStatus != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "disk_full Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_disk_full = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_disk_full;
            MemberId member_id_disk_full = 0x00000001;
            if (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() || TK_NONE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_disk_full = TypeObjectUtils::build_common_struct_member(member_id_disk_full, member_flags_disk_full, type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_disk_full = TypeObjectUtils::build_common_struct_member(member_id_disk_full, member_flags_disk_full, type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure disk_full member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_disk_full = "disk_full";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_disk_full;
            ann_custom_DdsRecorderMonitoringErrorStatus.reset();
            CompleteMemberDetail detail_disk_full = TypeObjectUtils::build_complete_member_detail(name_disk_full, member_ann_builtin_disk_full, ann_custom_DdsRecorderMonitoringErrorStatus);
            CompleteStructMember member_disk_full = TypeObjectUtils::build_complete_struct_member(common_disk_full, detail_disk_full);
            TypeObjectUtils::add_complete_struct_member(member_seq_DdsRecorderMonitoringErrorStatus, member_disk_full);
        }
        CompleteStructType struct_type_DdsRecorderMonitoringErrorStatus = TypeObjectUtils::build_complete_struct_type(struct_flags_DdsRecorderMonitoringErrorStatus, header_DdsRecorderMonitoringErrorStatus, member_seq_DdsRecorderMonitoringErrorStatus);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_DdsRecorderMonitoringErrorStatus, type_name_DdsRecorderMonitoringErrorStatus.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "DdsRecorderMonitoringErrorStatus already registered in TypeObjectRegistry for a different type.");
        }
        return_code_DdsRecorderMonitoringErrorStatus =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "DdsRecorderMonitoringErrorStatus", type_ids_DdsRecorderMonitoringErrorStatus);
        if (return_code_DdsRecorderMonitoringErrorStatus != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "DdsRecorderMonitoringErrorStatus: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_DdsRecorderMonitoringStatus_type_identifier()
{
    {
        StructTypeFlag struct_flags_DdsRecorderMonitoringStatus = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_DdsRecorderMonitoringStatus;
        TypeIdentifierPair type_ids_DdsRecorderMonitoringStatus;
        return_code_DdsRecorderMonitoringStatus =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MonitoringStatus", type_ids_DdsRecorderMonitoringStatus);

        if (return_code_DdsRecorderMonitoringStatus != eprosima::fastdds::dds::RETCODE_OK)
        {
            {
                StructTypeFlag struct_flags_MonitoringStatus = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                        false, false);
                ReturnCode_t return_code_MonitoringStatus;
                TypeIdentifierPair type_ids_MonitoringStatus;
                QualifiedTypeName type_name_MonitoringStatus = "MonitoringStatus";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MonitoringStatus;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MonitoringStatus;
                CompleteTypeDetail detail_MonitoringStatus = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MonitoringStatus, ann_custom_MonitoringStatus, type_name_MonitoringStatus.to_string());
                CompleteStructHeader header_MonitoringStatus;
                header_MonitoringStatus = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MonitoringStatus);
                CompleteStructMemberSeq member_seq_MonitoringStatus;
                {
                    return_code_MonitoringStatus =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MonitoringErrorStatus", type_ids_MonitoringStatus);

                    if (return_code_MonitoringStatus != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        {
                            StructTypeFlag struct_flags_MonitoringErrorStatus = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                    false, false);
                            ReturnCode_t return_code_MonitoringErrorStatus;
                            TypeIdentifierPair type_ids_MonitoringErrorStatus;
                            QualifiedTypeName type_name_MonitoringErrorStatus = "MonitoringErrorStatus";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MonitoringErrorStatus;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MonitoringErrorStatus;
                            CompleteTypeDetail detail_MonitoringErrorStatus = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MonitoringErrorStatus, ann_custom_MonitoringErrorStatus, type_name_MonitoringErrorStatus.to_string());
                            CompleteStructHeader header_MonitoringErrorStatus;
                            header_MonitoringErrorStatus = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MonitoringErrorStatus);
                            CompleteStructMemberSeq member_seq_MonitoringErrorStatus;
                            {
                                return_code_MonitoringErrorStatus =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_bool", type_ids_MonitoringErrorStatus);

                                if (return_code_MonitoringErrorStatus != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "type_mismatch Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_type_mismatch = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_type_mismatch;
                                MemberId member_id_type_mismatch = 0x00000000;
                                if (EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1()._d() || TK_NONE == type_ids_MonitoringErrorStatus.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MonitoringErrorStatus.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MonitoringErrorStatus.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_MonitoringErrorStatus.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_MonitoringErrorStatus.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_MonitoringErrorStatus.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_MonitoringErrorStatus.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_type_mismatch = TypeObjectUtils::build_common_struct_member(member_id_type_mismatch, member_flags_type_mismatch, type_ids_MonitoringErrorStatus.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MonitoringErrorStatus.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MonitoringErrorStatus.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_MonitoringErrorStatus.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_MonitoringErrorStatus.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_MonitoringErrorStatus.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_MonitoringErrorStatus.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_type_mismatch = TypeObjectUtils::build_common_struct_member(member_id_type_mismatch, member_flags_type_mismatch, type_ids_MonitoringErrorStatus.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure type_mismatch member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_type_mismatch = "type_mismatch";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_type_mismatch;
                                ann_custom_MonitoringErrorStatus.reset();
                                CompleteMemberDetail detail_type_mismatch = TypeObjectUtils::build_complete_member_detail(name_type_mismatch, member_ann_builtin_type_mismatch, ann_custom_MonitoringErrorStatus);
                                CompleteStructMember member_type_mismatch = TypeObjectUtils::build_complete_struct_member(common_type_mismatch, detail_type_mismatch);
                                TypeObjectUtils::add_complete_struct_member(member_seq_MonitoringErrorStatus, member_type_mismatch);
                            }
                            {
                                return_code_MonitoringErrorStatus =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_bool", type_ids_MonitoringErrorStatus);

                                if (return_code_MonitoringErrorStatus != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "qos_mismatch Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                StructMemberFlag member_flags_qos_mismatch = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_qos_mismatch;
                                MemberId member_id_qos_mismatch = 0x00000001;
                                if (EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1()._d() || TK_NONE == type_ids_MonitoringErrorStatus.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MonitoringErrorStatus.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MonitoringErrorStatus.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_MonitoringErrorStatus.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_MonitoringErrorStatus.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_MonitoringErrorStatus.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_MonitoringErrorStatus.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_qos_mismatch = TypeObjectUtils::build_common_struct_member(member_id_qos_mismatch, member_flags_qos_mismatch, type_ids_MonitoringErrorStatus.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MonitoringErrorStatus.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MonitoringErrorStatus.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_MonitoringErrorStatus.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_MonitoringErrorStatus.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_MonitoringErrorStatus.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_MonitoringErrorStatus.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_MonitoringErrorStatus.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_qos_mismatch = TypeObjectUtils::build_common_struct_member(member_id_qos_mismatch, member_flags_qos_mismatch, type_ids_MonitoringErrorStatus.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure qos_mismatch member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_qos_mismatch = "qos_mismatch";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_qos_mismatch;
                                ann_custom_MonitoringErrorStatus.reset();
                                CompleteMemberDetail detail_qos_mismatch = TypeObjectUtils::build_complete_member_detail(name_qos_mismatch, member_ann_builtin_qos_mismatch, ann_custom_MonitoringErrorStatus);
                                CompleteStructMember member_qos_mismatch = TypeObjectUtils::build_complete_struct_member(common_qos_mismatch, detail_qos_mismatch);
                                TypeObjectUtils::add_complete_struct_member(member_seq_MonitoringErrorStatus, member_qos_mismatch);
                            }
                            CompleteStructType struct_type_MonitoringErrorStatus = TypeObjectUtils::build_complete_struct_type(struct_flags_MonitoringErrorStatus, header_MonitoringErrorStatus, member_seq_MonitoringErrorStatus);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type_MonitoringErrorStatus, type_name_MonitoringErrorStatus.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MonitoringErrorStatus already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code_MonitoringErrorStatus =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MonitoringErrorStatus", type_ids_MonitoringErrorStatus);
                            if (return_code_MonitoringErrorStatus != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MonitoringErrorStatus: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                    }
                    StructMemberFlag member_flags_error_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_error_status;
                    MemberId member_id_error_status = 0x00000000;
                    if (EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1()._d() || TK_NONE == type_ids_MonitoringStatus.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_MonitoringStatus.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_MonitoringStatus.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_MonitoringStatus.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_MonitoringStatus.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_MonitoringStatus.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_MonitoringStatus.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_error_status = TypeObjectUtils::build_common_struct_member(member_id_error_status, member_flags_error_status, type_ids_MonitoringStatus.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_MonitoringStatus.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_MonitoringStatus.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_MonitoringStatus.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_MonitoringStatus.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_MonitoringStatus.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_MonitoringStatus.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_error_status = TypeObjectUtils::build_common_struct_member(member_id_error_status, member_flags_error_status, type_ids_MonitoringStatus.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure error_status member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_error_status = "error_status";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_error_status;
                    ann_custom_MonitoringStatus.reset();
                    CompleteMemberDetail detail_error_status = TypeObjectUtils::build_complete_member_detail(name_error_status, member_ann_builtin_error_status, ann_custom_MonitoringStatus);
                    CompleteStructMember member_error_status = TypeObjectUtils::build_complete_struct_member(common_error_status, detail_error_status);
                    TypeObjectUtils::add_complete_struct_member(member_seq_MonitoringStatus, member_error_status);
                }
                {
                    return_code_MonitoringStatus =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_bool", type_ids_MonitoringStatus);

                    if (return_code_MonitoringStatus != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "has_errors Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_has_errors = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_has_errors;
                    MemberId member_id_has_errors = 0x00000001;
                    if (EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1()._d() || TK_NONE == type_ids_MonitoringStatus.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_MonitoringStatus.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_MonitoringStatus.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_MonitoringStatus.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_MonitoringStatus.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_MonitoringStatus.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_MonitoringStatus.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_has_errors = TypeObjectUtils::build_common_struct_member(member_id_has_errors, member_flags_has_errors, type_ids_MonitoringStatus.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_MonitoringStatus.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_MonitoringStatus.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_MonitoringStatus.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_MonitoringStatus.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_MonitoringStatus.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_MonitoringStatus.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MonitoringStatus.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_has_errors = TypeObjectUtils::build_common_struct_member(member_id_has_errors, member_flags_has_errors, type_ids_MonitoringStatus.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure has_errors member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_has_errors = "has_errors";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_has_errors;
                    ann_custom_MonitoringStatus.reset();
                    CompleteMemberDetail detail_has_errors = TypeObjectUtils::build_complete_member_detail(name_has_errors, member_ann_builtin_has_errors, ann_custom_MonitoringStatus);
                    CompleteStructMember member_has_errors = TypeObjectUtils::build_complete_struct_member(common_has_errors, detail_has_errors);
                    TypeObjectUtils::add_complete_struct_member(member_seq_MonitoringStatus, member_has_errors);
                }
                CompleteStructType struct_type_MonitoringStatus = TypeObjectUtils::build_complete_struct_type(struct_flags_MonitoringStatus, header_MonitoringStatus, member_seq_MonitoringStatus);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_struct_type_object(struct_type_MonitoringStatus, type_name_MonitoringStatus.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MonitoringStatus already registered in TypeObjectRegistry for a different type.");
                }
                return_code_MonitoringStatus =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MonitoringStatus", type_ids_MonitoringStatus);
                if (return_code_MonitoringStatus != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MonitoringStatus: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
        }
        QualifiedTypeName type_name_DdsRecorderMonitoringStatus = "DdsRecorderMonitoringStatus";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_DdsRecorderMonitoringStatus;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_DdsRecorderMonitoringStatus;
        CompleteTypeDetail detail_DdsRecorderMonitoringStatus = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_DdsRecorderMonitoringStatus, ann_custom_DdsRecorderMonitoringStatus, type_name_DdsRecorderMonitoringStatus.to_string());
        CompleteStructHeader header_DdsRecorderMonitoringStatus;
        if (EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier1()._d())
        {
            header_DdsRecorderMonitoringStatus = TypeObjectUtils::build_complete_struct_header(type_ids_DdsRecorderMonitoringStatus.type_identifier1(), detail_DdsRecorderMonitoringStatus);
        }
        else if (EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier2()._d())
        {
            header_DdsRecorderMonitoringStatus = TypeObjectUtils::build_complete_struct_header(type_ids_DdsRecorderMonitoringStatus.type_identifier2(), detail_DdsRecorderMonitoringStatus);
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "DdsRecorderMonitoringStatus Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
            return;
        }
        CompleteStructMemberSeq member_seq_DdsRecorderMonitoringStatus;
        {
            return_code_DdsRecorderMonitoringStatus =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "DdsRecorderMonitoringErrorStatus", type_ids_DdsRecorderMonitoringStatus);

            if (return_code_DdsRecorderMonitoringStatus != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_DdsRecorderMonitoringErrorStatus = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_DdsRecorderMonitoringErrorStatus;
                    TypeIdentifierPair type_ids_DdsRecorderMonitoringErrorStatus;
                    QualifiedTypeName type_name_DdsRecorderMonitoringErrorStatus = "DdsRecorderMonitoringErrorStatus";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_DdsRecorderMonitoringErrorStatus;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_DdsRecorderMonitoringErrorStatus;
                    CompleteTypeDetail detail_DdsRecorderMonitoringErrorStatus = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_DdsRecorderMonitoringErrorStatus, ann_custom_DdsRecorderMonitoringErrorStatus, type_name_DdsRecorderMonitoringErrorStatus.to_string());
                    CompleteStructHeader header_DdsRecorderMonitoringErrorStatus;
                    header_DdsRecorderMonitoringErrorStatus = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_DdsRecorderMonitoringErrorStatus);
                    CompleteStructMemberSeq member_seq_DdsRecorderMonitoringErrorStatus;
                    {
                        return_code_DdsRecorderMonitoringErrorStatus =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_bool", type_ids_DdsRecorderMonitoringErrorStatus);

                        if (return_code_DdsRecorderMonitoringErrorStatus != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "mcap_file_creation_failure Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_mcap_file_creation_failure = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_mcap_file_creation_failure;
                        MemberId member_id_mcap_file_creation_failure = 0x00000000;
                        if (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() || TK_NONE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_mcap_file_creation_failure = TypeObjectUtils::build_common_struct_member(member_id_mcap_file_creation_failure, member_flags_mcap_file_creation_failure, type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_mcap_file_creation_failure = TypeObjectUtils::build_common_struct_member(member_id_mcap_file_creation_failure, member_flags_mcap_file_creation_failure, type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure mcap_file_creation_failure member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_mcap_file_creation_failure = "mcap_file_creation_failure";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_mcap_file_creation_failure;
                        ann_custom_DdsRecorderMonitoringErrorStatus.reset();
                        CompleteMemberDetail detail_mcap_file_creation_failure = TypeObjectUtils::build_complete_member_detail(name_mcap_file_creation_failure, member_ann_builtin_mcap_file_creation_failure, ann_custom_DdsRecorderMonitoringErrorStatus);
                        CompleteStructMember member_mcap_file_creation_failure = TypeObjectUtils::build_complete_struct_member(common_mcap_file_creation_failure, detail_mcap_file_creation_failure);
                        TypeObjectUtils::add_complete_struct_member(member_seq_DdsRecorderMonitoringErrorStatus, member_mcap_file_creation_failure);
                    }
                    {
                        return_code_DdsRecorderMonitoringErrorStatus =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_bool", type_ids_DdsRecorderMonitoringErrorStatus);

                        if (return_code_DdsRecorderMonitoringErrorStatus != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "disk_full Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_disk_full = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_disk_full;
                        MemberId member_id_disk_full = 0x00000001;
                        if (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() || TK_NONE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_disk_full = TypeObjectUtils::build_common_struct_member(member_id_disk_full, member_flags_disk_full, type_ids_DdsRecorderMonitoringErrorStatus.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_disk_full = TypeObjectUtils::build_common_struct_member(member_id_disk_full, member_flags_disk_full, type_ids_DdsRecorderMonitoringErrorStatus.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure disk_full member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_disk_full = "disk_full";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_disk_full;
                        ann_custom_DdsRecorderMonitoringErrorStatus.reset();
                        CompleteMemberDetail detail_disk_full = TypeObjectUtils::build_complete_member_detail(name_disk_full, member_ann_builtin_disk_full, ann_custom_DdsRecorderMonitoringErrorStatus);
                        CompleteStructMember member_disk_full = TypeObjectUtils::build_complete_struct_member(common_disk_full, detail_disk_full);
                        TypeObjectUtils::add_complete_struct_member(member_seq_DdsRecorderMonitoringErrorStatus, member_disk_full);
                    }
                    CompleteStructType struct_type_DdsRecorderMonitoringErrorStatus = TypeObjectUtils::build_complete_struct_type(struct_flags_DdsRecorderMonitoringErrorStatus, header_DdsRecorderMonitoringErrorStatus, member_seq_DdsRecorderMonitoringErrorStatus);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_DdsRecorderMonitoringErrorStatus, type_name_DdsRecorderMonitoringErrorStatus.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "DdsRecorderMonitoringErrorStatus already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_DdsRecorderMonitoringErrorStatus =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "DdsRecorderMonitoringErrorStatus", type_ids_DdsRecorderMonitoringErrorStatus);
                    if (return_code_DdsRecorderMonitoringErrorStatus != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "DdsRecorderMonitoringErrorStatus: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_ddsrecorder_error_status = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_ddsrecorder_error_status;
            MemberId member_id_ddsrecorder_error_status = 0x00000002;
            if (EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier1()._d() || TK_NONE == type_ids_DdsRecorderMonitoringStatus.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DdsRecorderMonitoringStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DdsRecorderMonitoringStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DdsRecorderMonitoringStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DdsRecorderMonitoringStatus.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DdsRecorderMonitoringStatus.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DdsRecorderMonitoringStatus.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_ddsrecorder_error_status = TypeObjectUtils::build_common_struct_member(member_id_ddsrecorder_error_status, member_flags_ddsrecorder_error_status, type_ids_DdsRecorderMonitoringStatus.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DdsRecorderMonitoringStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DdsRecorderMonitoringStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DdsRecorderMonitoringStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DdsRecorderMonitoringStatus.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DdsRecorderMonitoringStatus.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DdsRecorderMonitoringStatus.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DdsRecorderMonitoringStatus.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_ddsrecorder_error_status = TypeObjectUtils::build_common_struct_member(member_id_ddsrecorder_error_status, member_flags_ddsrecorder_error_status, type_ids_DdsRecorderMonitoringStatus.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure ddsrecorder_error_status member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ddsrecorder_error_status = "ddsrecorder_error_status";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ddsrecorder_error_status;
            ann_custom_DdsRecorderMonitoringStatus.reset();
            CompleteMemberDetail detail_ddsrecorder_error_status = TypeObjectUtils::build_complete_member_detail(name_ddsrecorder_error_status, member_ann_builtin_ddsrecorder_error_status, ann_custom_DdsRecorderMonitoringStatus);
            CompleteStructMember member_ddsrecorder_error_status = TypeObjectUtils::build_complete_struct_member(common_ddsrecorder_error_status, detail_ddsrecorder_error_status);
            TypeObjectUtils::add_complete_struct_member(member_seq_DdsRecorderMonitoringStatus, member_ddsrecorder_error_status);
        }
        CompleteStructType struct_type_DdsRecorderMonitoringStatus = TypeObjectUtils::build_complete_struct_type(struct_flags_DdsRecorderMonitoringStatus, header_DdsRecorderMonitoringStatus, member_seq_DdsRecorderMonitoringStatus);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_DdsRecorderMonitoringStatus, type_name_DdsRecorderMonitoringStatus.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "DdsRecorderMonitoringStatus already registered in TypeObjectRegistry for a different type.");
        }
        return_code_DdsRecorderMonitoringStatus =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "DdsRecorderMonitoringStatus", type_ids_DdsRecorderMonitoringStatus);
        if (return_code_DdsRecorderMonitoringStatus != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "DdsRecorderMonitoringStatus: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

